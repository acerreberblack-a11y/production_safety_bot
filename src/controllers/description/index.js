import { Scenes } from 'telegraf';
import logger from '../../utils/logger.js';
import ConfigLoader from '../../utils/configLoader.js';

const description = new Scenes.BaseScene('description');

description.enter(async (ctx) => {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞, –Ω–æ –±–µ–∑ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
    if (!ctx.session || Object.keys(ctx.session).length === 0) {
      ctx.session = {
        __scenes: ctx.session?.__scenes || { current: 'description', state: {} },
        lastBotMessage: null, // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      };
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ —Å—Ü–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      ctx.session.__scenes = ctx.session.__scenes || {};
      ctx.session.__scenes.current = 'description';
      ctx.session.__scenes.state = ctx.session.__scenes.state || {};
    }

    const config = await ConfigLoader.loadConfig();
    const descriptionConfig = config.controllers?.description;

    if (!descriptionConfig || !descriptionConfig.text) {
      throw new Error('Description configuration or text is missing');
    }

    const messageOptions = {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üöÄ –ù–∞—á–∞—Ç—å', callback_data: 'start_ticket' },
            { text: '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data: 'cancel' },
          ],
        ],
      },
    };

    let message;
    const lastMessage = ctx.session.lastBotMessage;

    // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ–Ω–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    if (!lastMessage || !lastMessage.messageId || !lastMessage.chatId) {
      message = await ctx.reply(descriptionConfig.text, messageOptions);
    } else {
      // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      try {
        if (lastMessage.type === 'photo') {
          await ctx.telegram.editMessageCaption(
            lastMessage.chatId,
            lastMessage.messageId,
            null,
            descriptionConfig.text,
            messageOptions,
          );
          message = { message_id: lastMessage.messageId, chat: { id: lastMessage.chatId } };
        } else {
          await ctx.telegram.editMessageText(
            lastMessage.chatId,
            lastMessage.messageId,
            null,
            descriptionConfig.text,
            messageOptions,
          );
          message = { message_id: lastMessage.messageId, chat: { id: lastMessage.chatId } };
        }
      } catch (editError) {
        logger.error(`Failed to edit message: ${editError.message}`);
        message = await ctx.reply(descriptionConfig.text, messageOptions); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    ctx.session.lastBotMessage = {
      messageId: message.message_id,
      chatId: message.chat.id,
      text: descriptionConfig.text,
      date: new Date().toISOString(),
      type: descriptionConfig.image?.enabled ? 'photo' : 'text',
    };

    logger.info(`User ${ctx.from.id} entered description scene`);
  } catch (error) {
    logger.error(`Error in description scene: ${error.message}`);
    await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∞–≤–∏–ª');
  }
});

description.action('start_ticket', async (ctx) => {
  try {
    const lastMessage = ctx.session.lastBotMessage;
    if (!lastMessage) {
      throw new Error('No last message found in session');
    }

    const messageOptions = {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [], // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
      },
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞, –æ—Å—Ç–∞–≤–ª—è—è —Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if (lastMessage.type === 'photo') {
      await ctx.telegram.editMessageCaption(
        lastMessage.chatId,
        lastMessage.messageId,
        null,
        lastMessage.text,
        messageOptions,
      );
    } else {
      await ctx.telegram.editMessageText(
        lastMessage.chatId,
        lastMessage.messageId,
        null,
        lastMessage.text,
        messageOptions,
      );
    }

    await ctx.scene.enter('ticketType');
    logger.info(`User ${ctx.from.id} switched to ticketType scene`);
  } catch (error) {
    logger.error(`Error in start_ticket action: ${error.message}`);
    await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏');
  }
});

description.action('cancel', async (ctx) => {
  try {
    const lastMessage = ctx.session.lastBotMessage;
    if (!lastMessage) {
      throw new Error('No last message found in session');
    }

    const messageOptions = {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [], // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
      },
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞, –æ—Å—Ç–∞–≤–ª—è—è —Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if (lastMessage.type === 'photo') {
      await ctx.telegram.editMessageCaption(
        lastMessage.chatId,
        lastMessage.messageId,
        null,
        lastMessage.text,
        messageOptions,
      );
    } else {
      await ctx.telegram.editMessageText(
        lastMessage.chatId,
        lastMessage.messageId,
        null,
        lastMessage.text,
        messageOptions,
      );
    }

    await ctx.reply('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
    await ctx.scene.enter('welcome');
    logger.info(`User ${ctx.from.id} cancelled description, returned to welcome scene`);
  } catch (error) {
    logger.error(`Error in cancel action: ${error.message}`);
    await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

export default description;
