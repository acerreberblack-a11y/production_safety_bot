// controllers/admin/module/orgSettings.js
import logger from '../../../utils/logger.js';
import ConfigLoader from '../../../utils/configLoader.js';

export default function orgSettings(scene) {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏ —Ñ–∏–ª-–æ–≤"
  scene.action('org_settings', async (ctx) => {
    try {
      await ctx.deleteMessage();
      const config = await ConfigLoader.loadConfig();
      logger.info('Loaded config organizations:', { organizations: config.organizations });
      const organizations = config.organizations || {};

      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (0 - —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π, 10 - —Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π)
      const sortedOrgs = Object.keys(organizations)
        .map((orgKey) => ({ key: orgKey, ...organizations[orgKey] }))
        .sort((a, b) => {
          const priorityA = a.priority !== undefined ? a.priority : 10;
          const priorityB = b.priority !== undefined ? b.priority : 10;
          logger.debug(`Sorting: ${a.name} (priority: ${priorityA}) vs ${b.name} (priority: ${priorityB})`);
          return priorityA - priorityB;
        });

      const keyboard = [
        ...sortedOrgs.map((org) => [
          {
            text: `üîπ ${org.name} (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${org.priority !== undefined ? org.priority : 10})`,
            callback_data: `select_organization_${org.key}`,
          },
        ]),
        [{ text: '–î–æ–±–∞–≤–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é', callback_data: 'add_organization' }],
        [{ text: '–£–¥–∞–ª–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é', callback_data: 'delete_organization' }],
        [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back_to_main' }],
      ];

      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É: 0 - –ø–µ—Ä–≤—ã–π, 10 - –ø–æ—Å–ª–µ–¥–Ω–∏–π):', {
        reply_markup: { inline_keyboard: keyboard },
      });
    } catch (error) {
      logger.error(`Error in org_settings action: ${error.message}`, { stack: error.stack });
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
  scene.action(/^select_organization_(.+)$/, async (ctx) => {
    try {
      await ctx.deleteMessage();
      const orgKey = ctx.match[1];
      const config = await ConfigLoader.loadConfig();
      logger.info(`Selecting organization with key: ${orgKey}, config:`, { organizations: config.organizations });
      const organization = config.organizations && config.organizations[orgKey];

      if (!organization) {
        throw new Error(`–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å –∫–ª—é—á–æ–º ${orgKey} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª–∏–∞–ª–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      logger.debug(`Raw branches for ${orgKey}:`, { branches: organization.branches });

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      const normalizedBranches = (organization.branches || []).map((branch) => {
        if (typeof branch === 'string') {
          return { name: branch, priority: 10 };
        }
        return branch;
      }).filter((branch) => branch && typeof branch === 'object' && branch.name && typeof branch.name === 'string');

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–ª–∏–∞–ª—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
      const sortedBranches = [...normalizedBranches].sort((a, b) => {
        const priorityA = a.priority !== undefined ? a.priority : 10;
        const priorityB = b.priority !== undefined ? b.priority : 10;
        logger.debug(`Sorting branches: ${a.name} (priority: ${priorityA}) vs ${b.name} (priority: ${priorityB})`);
        return priorityA - priorityB;
      });

      const keyboard = [
        [{ text: '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏', callback_data: `edit_org_name_${orgKey}` }],
        [{ text: '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏', callback_data: `edit_org_priority_${orgKey}` }],
        [{ text: '–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª–∏–∞–ª', callback_data: `add_branch_${orgKey}` }],
        [{ text: '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ñ–∏–ª–∏–∞–ª–∞', callback_data: `edit_branch_priority_prompt_${orgKey}` }],
        [{ text: '–£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª–∏–∞–ª', callback_data: `delete_branch_prompt_${orgKey}` }],
        [{ text: '–£–¥–∞–ª–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é', callback_data: `delete_organization_${orgKey}` }],
        [{ text: '–°–∫—Ä—ã—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é', callback_data: `hide_organization_${orgKey}` }],
        [{ text: '–ù–∞–∑–∞–¥', callback_data: 'org_settings' }],
      ];

      // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å —É—á—ë—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏—è 0
      const orgPriority = organization.priority !== undefined ? organization.priority : 10;
      const branchesText = sortedBranches.length
        ? sortedBranches.map((b) => {
          const branchPriority = b.priority !== undefined ? b.priority : 10;
          return `${b.name} (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${branchPriority})`;
        }).join(', ')
        : '–ù–µ—Ç —Ñ–∏–ª–∏–∞–ª–æ–≤';

      await ctx.reply(`–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: üîπ ${organization.name} (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${orgPriority})\n–§–∏–ª–∏–∞–ª—ã: ${branchesText}`, {
        reply_markup: { inline_keyboard: keyboard },
      });
      ctx.session.selectedOrg = orgKey;
    } catch (error) {
      logger.error(`Error in select_organization action: ${error.message}`, { stack: error.stack });
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
  scene.action('add_organization', async (ctx) => {
    try {
      await ctx.deleteMessage();
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (0-10, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10), –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"–ù–∞–∑–≤–∞–Ω–∏–µ,–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "–ù–∞–∑–≤–∞–Ω–∏–µ":', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'org_settings' }],
          ],
        },
      });
      ctx.session.action = 'add_organization';
    } catch (error) {
      logger.error(`Error in add_organization action: ${error.message}`, { stack: error.stack });
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–∑–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞)
  scene.action('delete_organization', async (ctx) => {
    try {
      await ctx.deleteMessage();
      const config = await ConfigLoader.loadConfig();
      const organizations = config.organizations || {};

      const keyboard = Object.keys(organizations).map((orgKey) => [
        { text: organizations[orgKey].name, callback_data: `confirm_delete_organization_${orgKey}` },
      ]).concat([[{ text: '–ù–∞–∑–∞–¥', callback_data: 'org_settings' }]]);

      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
        reply_markup: { inline_keyboard: keyboard },
      });
    } catch (error) {
      logger.error(`Error in delete_organization action: ${error.message}`, { stack: error.stack });
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
  scene.action(/^confirm_delete_organization_(.+)$/, async (ctx) => {
    try {
      await ctx.deleteMessage();
      const orgKey = ctx.match[1];
      const config = await ConfigLoader.loadConfig();
      const organization = config.organizations[orgKey];

      if (!organization) {
        throw new Error(`–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å –∫–ª—é—á–æ–º ${orgKey} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }

      const keyboard = [
        [{ text: '–î–∞', callback_data: `delete_organization_${orgKey}` }],
        [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'org_settings' }],
      ];

      await ctx.reply(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é "${organization.name}"?`, {
        reply_markup: { inline_keyboard: keyboard },
      });
    } catch (error) {
      logger.error(`Error in confirm_delete_organization action: ${error.message}`, { stack: error.stack });
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
  scene.action(/^delete_organization_(.+)$/, async (ctx) => {
    try {
      await ctx.deleteMessage();
      const orgKey = ctx.match[1];
      await ConfigLoader.deleteOrganization(orgKey);
      await ctx.reply('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–ù–∞–∑–∞–¥', callback_data: 'org_settings' }],
          ],
        },
      });
    } catch (error) {
      logger.error(`Error in delete_organization action: ${error.message}`, { stack: error.stack });
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
  scene.action(/^edit_org_name_(.+)$/, async (ctx) => {
    try {
      await ctx.deleteMessage();
      const orgKey = ctx.match[1];
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (0-10, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10), –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"–ù–∞–∑–≤–∞–Ω–∏–µ,–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "–ù–∞–∑–≤–∞–Ω–∏–µ":', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: `select_organization_${orgKey}` }],
          ],
        },
      });
      ctx.session.action = `edit_org_name_${orgKey}`;
    } catch (error) {
      logger.error(`Error in edit_org_name action: ${error.message}`, { stack: error.stack });
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞
  scene.action(/^add_branch_(.+)$/, async (ctx) => {
    try {
      await ctx.deleteMessage();
      const orgKey = ctx.match[1];
      logger.info(`Starting add_branch action for orgKey: ${orgKey}`);
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ ;, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–º—è1;–ò–º—è2;–ò–º—è3) –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (0-10, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10), –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"–ù–∞–∑–≤–∞–Ω–∏–µ1;–ù–∞–∑–≤–∞–Ω–∏–µ2,–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "–ù–∞–∑–≤–∞–Ω–∏–µ":', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: `select_organization_${orgKey}` }],
          ],
        },
      });
      ctx.session.action = `add_branch_${orgKey}`;
    } catch (error) {
      logger.error(`Error in add_branch action: ${error.message}`, { stack: error.stack });
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª–∏–∞–ª.');
    }
  });

  // –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
  scene.action(/^edit_org_priority_(.+)$/, async (ctx) => {
    try {
      await ctx.deleteMessage();
      const orgKey = ctx.match[1];
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10):', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: `select_organization_${orgKey}` }],
          ],
        },
      });
      ctx.session.action = `edit_org_priority_${orgKey}`;
    } catch (error) {
      logger.error(`Error in edit_org_priority action: ${error.message}`, { stack: error.stack });
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.');
    }
  });

  // –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  scene.action(/^edit_branch_priority_prompt_(.+)$/, async (ctx) => {
    try {
      await ctx.deleteMessage();
      const orgKey = ctx.match[1];
      const config = await ConfigLoader.loadConfig();
      const branches = config.organizations[orgKey].branches || [];

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª–∏–∞–ª–æ–≤
      const normalizedBranches = branches.map((branch) => {
        if (typeof branch === 'string') {
          return { name: branch, priority: 10 };
        }
        return branch;
      }).filter((branch) => branch && typeof branch === 'object' && branch.name && typeof branch.name === 'string');

      const keyboard = normalizedBranches.map((branch, index) => [
        { text: `${branch.name} (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${branch.priority !== undefined ? branch.priority : 10}, ID: ${index})`, callback_data: `edit_branch_priority_${orgKey}_${index}` },
      ]).concat([[{ text: '–ù–∞–∑–∞–¥', callback_data: `select_organization_${orgKey}` }]]);

      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–æ ID:', {
        reply_markup: { inline_keyboard: keyboard },
      });
    } catch (error) {
      logger.error(`Error in edit_branch_priority_prompt action: ${error.message}`, { stack: error.stack });
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤.');
    }
  });

  // –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ñ–∏–ª–∏–∞–ª–∞
  scene.action(/^edit_branch_priority_(.+)_(.+)$/, async (ctx) => {
    try {
      await ctx.deleteMessage();
      const [orgKey, branchIndex] = ctx.match.slice(1);
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10):', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: `select_organization_${orgKey}` }],
          ],
        },
      });
      ctx.session.action = `edit_branch_priority_${orgKey}_${branchIndex}`;
    } catch (error) {
      logger.error(`Error in edit_branch_priority action: ${error.message}`, { stack: error.stack });
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ñ–∏–ª–∏–∞–ª–∞.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞ (–∑–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞)
  scene.action(/^delete_branch_prompt_(.+)$/, async (ctx) => {
    try {
      await ctx.deleteMessage();
      const orgKey = ctx.match[1];
      const config = await ConfigLoader.loadConfig();
      const branches = config.organizations[orgKey].branches || [];

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª–∏–∞–ª–æ–≤
      const normalizedBranches = branches.map((branch) => {
        if (typeof branch === 'string') {
          return { name: branch, priority: 10 };
        }
        return branch;
      }).filter((branch) => branch && typeof branch === 'object' && branch.name && typeof branch.name === 'string');

      const keyboard = normalizedBranches.map((branch, index) => [
        { text: `${branch.name} (ID: ${index})`, callback_data: `confirm_delete_branch_${orgKey}_${index}` },
      ]).concat([[{ text: '–ù–∞–∑–∞–¥', callback_data: `select_organization_${orgKey}` }]]);

      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ ID:', {
        reply_markup: { inline_keyboard: keyboard },
      });
    } catch (error) {
      logger.error(`Error in delete_branch_prompt action: ${error.message}`, { stack: error.stack });
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞
  scene.action(/^confirm_delete_branch_(.+)_(.+)$/, async (ctx) => {
    try {
      await ctx.deleteMessage();
      const [orgKey, branchIndex] = ctx.match.slice(1);
      const config = await ConfigLoader.loadConfig();
      const branches = config.organizations[orgKey].branches || [];
      const normalizedBranches = branches.map((branch) => {
        if (typeof branch === 'string') {
          return { name: branch, priority: 10 };
        }
        return branch;
      }).filter((branch) => branch && typeof branch === 'object' && branch.name && typeof branch.name === 'string');
      const branchToDelete = normalizedBranches[parseInt(branchIndex)];

      if (!branchToDelete) {
        throw new Error(`–§–∏–ª–∏–∞–ª —Å –∏–Ω–¥–µ–∫—Å–æ–º ${branchIndex} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      const keyboard = [
        [{ text: '–î–∞', callback_data: `delete_branch_${orgKey}_${branchIndex}` }],
        [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: `select_organization_${orgKey}` }],
      ];

      await ctx.reply(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª–∏–∞–ª "${branchToDelete.name}"?`, {
        reply_markup: { inline_keyboard: keyboard },
      });
    } catch (error) {
      logger.error(`Error in confirm_delete_branch action: ${error.message}`, { stack: error.stack });
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞
  scene.action(/^delete_branch_(.+)_(.+)$/, async (ctx) => {
    try {
      await ctx.deleteMessage();
      const [orgKey, branchIndex] = ctx.match.slice(1);
      await ConfigLoader.deleteBranch(orgKey, parseInt(branchIndex));
      await ctx.reply('–§–∏–ª–∏–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–ù–∞–∑–∞–¥', callback_data: `select_organization_${orgKey}` }],
          ],
        },
      });
    } catch (error) {
      logger.error(`Error in delete_branch action: ${error.message}`, { stack: error.stack });
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∏–ª–∏–∞–ª–∞.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä—ã—Ç–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
  scene.action(/^hide_organization_(.+)$/, async (ctx) => {
    try {
      await ctx.deleteMessage();
      const orgKey = ctx.match[1];
      await ConfigLoader.hideOrganization(orgKey);
      await ctx.reply('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∞!', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–ù–∞–∑–∞–¥', callback_data: 'org_settings' }],
          ],
        },
      });
    } catch (error) {
      logger.error(`Error in hide_organization action: ${error.message}`, { stack: error.stack });
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.');
    }
  });
}
