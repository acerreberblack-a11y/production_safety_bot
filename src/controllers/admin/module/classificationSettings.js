// controllers/admin/module/classificationSettings.js
import logger from '../../../utils/logger.js';
import ConfigLoader from '../../../utils/configLoader.js';

export default function classificationSettings(scene) {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π"
  scene.action('classification_settings', async (ctx) => {
    try {
      await ctx.deleteMessage();
      const config = await ConfigLoader.loadConfig();
      logger.info('Loaded config classifications:', { classifications: config.classifications });
      const classifications = config.classifications || {};

      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (0 - —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π, 10 - —Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π)
      const sortedClasses = Object.keys(classifications)
        .map((classKey) => ({ key: classKey, ...classifications[classKey] }))
        .sort((a, b) => {
          const priorityA = a.priority !== undefined ? a.priority : 10;
          const priorityB = b.priority !== undefined ? b.priority : 10;
          logger.debug(`Sorting classifications: ${a.name} (priority: ${priorityA}) vs ${b.name} (priority: ${priorityB})`);
          return priorityA - priorityB;
        });

      const keyboard = [
        ...sortedClasses.map((classItem) => [
          {
            text: `üîπ ${classItem.name} (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${classItem.priority !== undefined ? classItem.priority : 10})`,
            callback_data: `select_classification_${classItem.key}`,
          },
        ]),
        [{ text: '–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é', callback_data: 'add_classification' }],
        [{ text: '–£–¥–∞–ª–∏—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é', callback_data: 'delete_classification' }],
        [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back_to_main' }],
      ];

      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É: 0 - –ø–µ—Ä–≤—ã–π, 10 - –ø–æ—Å–ª–µ–¥–Ω–∏–π):', {
        reply_markup: { inline_keyboard: keyboard },
      });
    } catch (error) {
      logger.error(`Error in classification_settings action: ${error.message}`, { stack: error.stack });
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
  scene.action(/^select_classification_(.+)$/, async (ctx) => {
    try {
      await ctx.deleteMessage();
      const classKey = ctx.match[1];
      const config = await ConfigLoader.loadConfig();
      logger.info(`Selecting classification with key: ${classKey}, config:`, { classifications: config.classifications });
      const classification = config.classifications && config.classifications[classKey];

      if (!classification) {
        throw new Error(`–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –∫–ª—é—á–æ–º ${classKey} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }

      const classPriority = classification.priority !== undefined ? classification.priority : 10;

      const keyboard = [
        [{ text: '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data: `edit_class_name_${classKey}` }],
        [{ text: '–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç', callback_data: `edit_class_priority_${classKey}` }],
        [{ text: '–£–¥–∞–ª–∏—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é', callback_data: `delete_classification_${classKey}` }],
        [{ text: '–ù–∞–∑–∞–¥', callback_data: 'classification_settings' }],
      ];

      await ctx.reply(`–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: üîπ ${classification.name} (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${classPriority})`, {
        reply_markup: { inline_keyboard: keyboard },
      });
      ctx.session.selectedClass = classKey;
    } catch (error) {
      logger.error(`Error in select_classification action: ${error.message}`, { stack: error.stack });
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
  scene.action('add_classification', async (ctx) => {
    try {
      await ctx.deleteMessage();
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ ;, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–º—è1;–ò–º—è2;–ò–º—è3) –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (0-10, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10), –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"–ù–∞–∑–≤–∞–Ω–∏–µ1;–ù–∞–∑–≤–∞–Ω–∏–µ2,–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "–ù–∞–∑–≤–∞–Ω–∏–µ":', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'classification_settings' }],
          ],
        },
      });
      ctx.session.action = 'add_classification';
    } catch (error) {
      logger.error(`Error in add_classification action: ${error.message}`, { stack: error.stack });
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
  scene.action(/^edit_class_name_(.+)$/, async (ctx) => {
    try {
      await ctx.deleteMessage();
      const classKey = ctx.match[1];
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (0-10, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10), –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"–ù–∞–∑–≤–∞–Ω–∏–µ,–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "–ù–∞–∑–≤–∞–Ω–∏–µ":', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: `select_classification_${classKey}` }],
          ],
        },
      });
      ctx.session.action = `edit_class_name_${classKey}`;
    } catch (error) {
      logger.error(`Error in edit_class_name action: ${error.message}`, { stack: error.stack });
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
  scene.action(/^edit_class_priority_(.+)$/, async (ctx) => {
    try {
      await ctx.deleteMessage();
      const classKey = ctx.match[1];
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10):', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: `select_classification_${classKey}` }],
          ],
        },
      });
      ctx.session.action = `edit_class_priority_${classKey}`;
    } catch (error) {
      logger.error(`Error in edit_class_priority action: ${error.message}`, { stack: error.stack });
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∑–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞)
  scene.action('delete_classification', async (ctx) => {
    try {
      await ctx.deleteMessage();
      const config = await ConfigLoader.loadConfig();
      const classifications = config.classifications || {};

      const keyboard = Object.keys(classifications).map((classKey) => [
        { text: classifications[classKey].name, callback_data: `confirm_delete_classification_${classKey}` },
      ]).concat([[{ text: '–ù–∞–∑–∞–¥', callback_data: 'classification_settings' }]]);

      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
        reply_markup: { inline_keyboard: keyboard },
      });
    } catch (error) {
      logger.error(`Error in delete_classification action: ${error.message}`, { stack: error.stack });
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
  scene.action(/^confirm_delete_classification_(.+)$/, async (ctx) => {
    try {
      await ctx.deleteMessage();
      const classKey = ctx.match[1];
      const config = await ConfigLoader.loadConfig();
      const classification = config.classifications[classKey];

      if (!classification) {
        throw new Error(`–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –∫–ª—é—á–æ–º ${classKey} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }

      const keyboard = [
        [{ text: '–î–∞', callback_data: `delete_classification_${classKey}` }],
        [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'classification_settings' }],
      ];

      await ctx.reply(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é "${classification.name}"?`, {
        reply_markup: { inline_keyboard: keyboard },
      });
    } catch (error) {
      logger.error(`Error in confirm_delete_classification action: ${error.message}`, { stack: error.stack });
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
  scene.action(/^delete_classification_(.+)$/, async (ctx) => {
    try {
      await ctx.deleteMessage();
      const classKey = ctx.match[1];
      await ConfigLoader.deleteClassification(classKey);
      await ctx.reply('–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–ù–∞–∑–∞–¥', callback_data: 'classification_settings' }],
          ],
        },
      });
    } catch (error) {
      logger.error(`Error in delete_classification action: ${error.message}`, { stack: error.stack });
      await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.');
    }
  });
}
