// controllers/admin/module/emailSettings.js
import logger from '../../../utils/logger.js';
import ConfigLoader from '../../../utils/configLoader.js';

import { sendCodeEmail } from '../../../utils/emailConfig.js'

export default function emailSettings(scene) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ email"
    scene.action('email_settings', async (ctx) => {
        try {
            await ctx.deleteMessage();
            const config = await ConfigLoader.loadConfig();
            logger.info('Loaded email config:', { email: config.general.email });
            const { host, port, user,  password, secure, rejectUnauthorized} = config.general.email || {};

            const keyboard = [
                [
                    {
                        text: `üìß –•–æ—Å—Ç: ${host || '–Ω–µ –∑–∞–¥–∞–Ω'}`,
                        callback_data: 'edit_email_host'
                    }
                ],
                [
                    {
                        text: `üîå –ü–æ—Ä—Ç: ${port || 25}`,
                        callback_data: 'edit_email_port'
                    }
                ],
                [
                    {
                        text: `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user || '–Ω–µ –∑–∞–¥–∞–Ω'}`,
                        callback_data: 'edit_email_user'
                    }
                ],
                [
                    {
                        text: `üîí –ü–∞—Ä–æ–ª—å: ${password ? '******' : '–Ω–µ –∑–∞–¥–∞–Ω'}`,
                        callback_data: 'edit_email_password'
                    }
                ],
                [
                    {
                        text: `üîê Secure: ${secure ? '–î–∞' : '–ù–µ—Ç'}`,
                        callback_data: 'toggle_email_secure'
                    }
                ],
                [
                    {
                        text: `‚ö†Ô∏è Reject Unauthorized: ${rejectUnauthorized ? '–î–∞' : '–ù–µ—Ç'}`,
                        callback_data: 'toggle_email_reject'
                    }
                ],
                [
                    {
                        text: '–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏',
                        callback_data: 'test_email_settings'
                    }
                ],
                [
                    {
                        text: '–ù–∞–∑–∞–¥',
                        callback_data: 'back_to_main'
                    }
                ]
            ];

            await ctx.reply('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ email:', {
                reply_markup: { inline_keyboard: keyboard }
            });
        } catch (error) {
            logger.error(`Error in email_settings action: ${error.message}`, { stack: error.stack });
            await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ email.');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ö–æ—Å—Ç–∞
    scene.action('edit_email_host', async (ctx) => {
        try {
            await ctx.deleteMessage();
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ö–æ—Å—Ç –¥–ª—è email (–Ω–∞–ø—Ä–∏–º–µ—Ä, smtp.gmail.com):', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'email_settings' }]
                    ]
                }
            });
            ctx.session.action = 'edit_email_host';
        } catch (error) {
            logger.error(`Error in edit_email_host action: ${error.message}`, { stack: error.stack });
            await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ö–æ—Å—Ç.');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—Ç–∞
    scene.action('edit_email_port', async (ctx) => {
        try {
            await ctx.deleteMessage();
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä—Ç –¥–ª—è email (–Ω–∞–ø—Ä–∏–º–µ—Ä, 587 –∏–ª–∏ 465):', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'email_settings' }]
                    ]
                }
            });
            ctx.session.action = 'edit_email_port';
        } catch (error) {
            logger.error(`Error in edit_email_port action: ${error.message}`, { stack: error.stack });
            await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—Ç.');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    scene.action('edit_email_user', async (ctx) => {
        try {
            await ctx.deleteMessage();
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è email (–Ω–∞–ø—Ä–∏–º–µ—Ä, user@domain.com):', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'email_settings' }]
                    ]
                }
            });
            ctx.session.action = 'edit_email_user';
        } catch (error) {
            logger.error(`Error in edit_email_user action: ${error.message}`, { stack: error.stack });
            await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    scene.action('edit_email_password', async (ctx) => {
        try {
            await ctx.deleteMessage();
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è email:', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'email_settings' }]
                    ]
                }
            });
            ctx.session.action = 'edit_email_password';
        } catch (error) {
            logger.error(`Error in edit_email_password action: ${error.message}`, { stack: error.stack });
            await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å.');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è secure
    scene.action('toggle_email_secure', async (ctx) => {
        try {
            await ctx.deleteMessage();
            const config = await ConfigLoader.loadConfig();
            config.general.email.secure = !config.general.email.secure;
            await ConfigLoader.saveConfig(config);

            logger.info('Toggled email secure setting', { secure: config.general.email.secure });
            await ctx.reply(`Secure —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ${config.general.email.secure ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ù–∞–∑–∞–¥', callback_data: 'email_settings' }]
                    ]
                }
            });
        } catch (error) {
            logger.error(`Error in toggle_email_secure action: ${error.message}`, { stack: error.stack });
            await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ secure.');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è rejectUnauthorized
    scene.action('toggle_email_reject', async (ctx) => {
        try {
            await ctx.deleteMessage();
            const config = await ConfigLoader.loadConfig();
            config.general.email.rejectUnauthorized = !config.general.email.rejectUnauthorized;
            await ConfigLoader.saveConfig(config);

            logger.info('Toggled email rejectUnauthorized setting', { rejectUnauthorized: config.general.email.rejectUnauthorized });
            await ctx.reply(`Reject Unauthorized ${config.general.email.rejectUnauthorized ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ù–∞–∑–∞–¥', callback_data: 'email_settings' }]
                    ]
                }
            });
        } catch (error) {
            logger.error(`Error in toggle_email_reject action: ${error.message}`, { stack: error.stack });
            await ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ rejectUnauthorized.');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    scene.action('test_email_settings', async (ctx) => {
        try {
            await ctx.deleteMessage();
            const config = await ConfigLoader.loadConfig();
            const { host, user, password } = config.general?.email;

            if (!host || !user || !password) {
                throw new Error('–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã email –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
            }

            logger.info(`Testing email settings: host:${host}, user: ${user}, pass: ${password}`);

            try {

                await ctx.reply('–í—ã–ø–æ–ª–Ω—è—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞. –û–∂–∏–¥–∞–π—Ç–µ...', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–ù–∞–∑–∞–¥', callback_data: 'email_settings' }]
                        ]
                    }
                });

                await sendCodeEmail(user, '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—å–±–∞ –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–µ–≥–æ!');
                await ctx.reply('–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ email —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–ù–∞–∑–∞–¥', callback_data: 'email_settings' }]
                        ]
                    }
                });
            } catch (e) {
                logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ email: ${e.message}`, { stack: e.stack });
                await ctx.reply('–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ email –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–µ–π!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—á—Ç—ã.', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–ù–∞–∑–∞–¥', callback_data: 'email_settings' }]
                        ]
                    }
                });
            }
        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –≤ test_email_settings: ${error.message}`, { stack: error.stack });
            await ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ email: ${error.message}`);
        }
    });


    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
    scene.on('text', async (ctx) => {
        const action = ctx.session.action;
        if (!action || !action.startsWith('edit_email_')) return;

        try {
            const config = await ConfigLoader.loadConfig();
            const text = ctx.message.text.trim();

            switch (action) {
                case 'edit_email_host':
                    config.general.email.host = text;
                    await ConfigLoader.saveConfig(config);
                    await ctx.reply('–•–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', {
                        reply_markup: {
                            inline_keyboard: [[{ text: '–ù–∞–∑–∞–¥', callback_data: 'email_settings' }]]
                        }
                    });
                    break;

                case 'edit_email_port':
                    const port = Number(text);
                    if (isNaN(port) || port < 1 || port > 65535) {
                        throw new Error('–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 65535');
                    }
                    config.general.email.port = port;
                    await ConfigLoader.saveConfig(config);
                    await ctx.reply('–ü–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', {
                        reply_markup: {
                            inline_keyboard: [[{ text: '–ù–∞–∑–∞–¥', callback_data: 'email_settings' }]]
                        }
                    });
                    break;

                case 'edit_email_user':
                    config.general.email.user = text;
                    await ConfigLoader.saveConfig(config);
                    await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', {
                        reply_markup: {
                            inline_keyboard: [[{ text: '–ù–∞–∑–∞–¥', callback_data: 'email_settings' }]]
                        }
                    });
                    break;

                case 'edit_email_password':
                    config.general.email.password = text;
                    await ConfigLoader.saveConfig(config);
                    await ctx.reply('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', {
                        reply_markup: {
                            inline_keyboard: [[{ text: '–ù–∞–∑–∞–¥', callback_data: 'email_settings' }]]
                        }
                    });
                    break;

                default:
                    return;
            }

            logger.info(`Updated email setting: ${action}`, { value: text });
            delete ctx.session.action;

        } catch (error) {
            logger.error(`Error processing email setting ${action}: ${error.message}`, { stack: error.stack });
            await ctx.reply(`–û—à–∏–±–∫–∞: ${error.message}`, {
                reply_markup: {
                    inline_keyboard: [[{ text: '–ù–∞–∑–∞–¥', callback_data: 'email_settings' }]]
                }
            });
        }
    });
}